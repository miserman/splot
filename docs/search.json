[{"path":"https://miserman.github.io/splot/articles/explore.html","id":"setting-up","dir":"Articles","previous_headings":"","what":"Setting up","title":"Exploring Data with splot","text":"First, sure splot loaded: can read data directly OSF: download file osf.io/crgkn. look data. participant condition related variables, particularly useful splitting:","code":"library(\"splot\") data <- read.csv(\"https://osf.io/download/crgkn\") data[493:502, c(1:3, 80:82)] #>     reply Study ParticipantID     Style       Topic  Label #> 493 First     3    3704301285  Feminine Life Course Female #> 494 First     3    7482037219 Masculine  Relational   Male #> 495 First     3    1035132554 Masculine  Relational   Male #> 496 First     3    8764748766  Feminine  Relational   Male #> 497 First     3    7422386495  Feminine Life Course Female #> 498 First     3    8875594201  Feminine Life Course   Male #> 499 First     3    5473944690  Feminine Life Course Female #> 500 First     3    3828484938  Feminine  Relational   Male #> 501 First     3    5862456995  Feminine  Relational   Male #> 502 First     3    6159447371  Feminine  Relational   Male"},{"path":"https://miserman.github.io/splot/articles/explore.html","id":"calculating-language-style-matching","dir":"Articles","previous_headings":"","what":"Calculating Language Style Matching","title":"Exploring Data with splot","text":"studies participants reading prompt writing advice response. language prompts responses analyzed Linguistic Inquiry Word Count (LIWC) program, categorizes words based dictionary. Using categories, can look forms language style matching—similar participants’ reply prompt read. First, prompts LIWC categories included separate file: strings prompts’ Type variable corresponds topic, style, study participant’s reply. want compare language style prompt replies, ’ll make Type variable match data: Now can actually calculate Language Style Matching (LSM). Standard LSM calculation (Gonzales, Hancock, & Pennebaker, 2009) uses 9 LIWC function word categories. ’ll save names easily identify dataset: form LSM uses inversed Canberra distance measure similarity, many similarity metrics, might compare : Alternatively, can use lingmatch package perform calculations efficiently:","code":"prompts <- read.csv(\"https://osf.io/download/xm6ew\") data$Type <- with(data, paste0(   ifelse(Topic == \"Relational\", \"R\", \"LC\"),   ifelse(Style == \"Feminine\", \"F\", \"M\"),   Study )) cats <- c(   \"ppron\", \"ipron\", \"article\", \"adverb\", \"conj\", \"prep\", \"auxverb\", \"negate\", \"quant\" ) # name the metrics we want to calculate. metrics <- c(\"canberra\", \"cosine\", \"euclidean\")  # make empty columns for each in the dataset. data[, metrics] <- NA  # then loop through each condition. for (c in unique(data$Type)) {   # pull in the prompt for the given condition.   comp <- prompts[prompts$Type == c, cats]    # identify the subset of data replying to this prompt.   su <- data$Type == c    # then perform each calculation between each row in data and the prompt.   data[su, metrics] <- t(apply(data[su, cats], 1, function(r) {     c(       sum(1 - abs(r - comp) / (r + comp + .0001)) / length(r),       sum(r * comp) / sqrt(sum(r^2 * sum(comp^2))),       1 / (1 + sqrt(sum((r - comp)^2)))     )   })) } library(\"lingmatch\") metrics <- c(\"canberra\", \"cosine\", \"euclidean\") data[, metrics] <- lingmatch(   data, prompts,   group = Type, metric = \"all\", type = \"lsm\" )$sim[, metrics]"},{"path":"https://miserman.github.io/splot/articles/explore.html","id":"looking-at-language-style-matching","dir":"Articles","previous_headings":"","what":"Looking at Language Style Matching","title":"Exploring Data with splot","text":"First, can look distributions different ways:    different similarity metrics calculated pretty highly correlated: relationship quite linear:  also vary differently prompts studies:  Studies 3 4, participant replied two prompts, can look changes matching one prompt another (looks pretty random, generally want):","code":"splot(data[, metrics]) # mv.scale z-scores multiple y variables to make them easier to compare. splot(data[, metrics], mv.scale = T) # su subsets the dataset to show only replies to the # masculine relational prompt in Study 4. splot(data[, metrics], data, Type == \"RM4\", mv.scale = T) cor(data[, metrics]) #>            canberra    cosine euclidean #> canberra  1.0000000 0.7823261 0.7463881 #> cosine    0.7823261 1.0000000 0.8556146 #> euclidean 0.7463881 0.8556146 1.0000000 # cbind (or list) is another way to enter multiple y variables. # when a transformed version of the x variable is added, # it is used to adjust the prediction line. splot(cbind(canberra, cosine) ~ euclidean + log(euclidean), data) splot(data[, metrics] ~ prompt, data, Study > 2, between = Study, mv.scale = T) # turning ParticipantID into characters or setting lim to FALSE # will prevent it from being split. # other aspects are just cosmetic; #  line.type affects the appearance of the lines, #  and mxl spreads the x labels a little more. splot(   canberra ~ reply * as.character(ParticipantID), data, Study == 4,   line.type = \"l\", mxl = c(1, 2) )"},{"path":"https://miserman.github.io/splot/articles/explore.html","id":"person-perception-ratings","dir":"Articles","previous_headings":"","what":"Person Perception Ratings","title":"Exploring Data with splot","text":"writing advice authors prompt, participants also completed ratings text author. One potentially interesting rating relative socioeconomic status (relativeSes; “Relative , place author’s socioeconomic status?”; -3 3).  difference styles doesn’t appear topic, , incongruent style rated lower status congruent style (considering relational feminine topic, life course masculine topic). inconsistency prompts may explained setting; first two life course prompts largely job related, relational topics . prompts Study 4 set reverse , relational topic set workplace, life course topic least directly related job. can sometimes help look pattern different way, compare variables:  Study 3, perception related variables seem hang together part, ratings text (TextQuality), ratings author (relativeSes), disposition toward author (pp_like Behavioral) generally increasing masculine relational prompt masculine life course prompt. contrast, Study 4 SES rating remains similar, liking staying prompts, text quasi-behavioral ratings generally decreasing masculine relational masculine life course prompt. Aside set workplace, relational prompts Study 4 also differed previous relational prompts content somewhat striking (concerning coworker’s potential abuse autistic child). may influenced perception text quality particular, appears aberrant perception ratings topics. , course, loose interpretations, exploration data may offer clearer pictures. Brought Language Use Social Interaction lab Texas Tech University","code":"# make a new variable to look at Study and Topic without Style. Study_and_Topic <- with(data, paste0(\"S\", Study, \" \", Topic))  splot(relativeSes ~ Study_and_Topic * as.factor(Style), data, type = \"bar\") # levels reorders the prompt variable to make the trends a little easier to see. splot(   cbind(TextQuality, Behavioral, pp_like, relativeSes) ~ prompt, data,   between = Study,   mv.scale = T, levels = list(prompt = c(4, 2, 1, 3)) )"},{"path":"https://miserman.github.io/splot/articles/gallery.html","id":"setting-up","dir":"Articles","previous_headings":"","what":"Setting up","title":"Gallery","text":"first argument splot formula, specifies different parts plot: position formula specific name role: y x displayed y x axes. splits data within plot frame; levels shown legend. bets split data plot frames, bet[1] breaking across rows, bet[2] across columns. covs added covariates regression models, adjust prediction line scatter plots, summaries bar line plots. can also entered named arguments:","code":"library(\"splot\")  # simulate some data, just for these examples n <- 1000 data <- within(data.frame(   id = formatC(rep(seq_len(n / 2), 2), width = 4, flag = 0),   group = sample(c(\"a\", \"b\", \"c\"), n, TRUE),   by = rep(0:1, each = n / 2),   bet1 = rep_len(0:1, n),   bet2 = sample(0:1, n, TRUE) ), {   x <- rnorm(n) + by * -.4 + by * bet1 * -.3 + by * bet2 * .3 + bet1 * bet2 *     .9 - .8 + rnorm(n, 0, by)   y <- x * .2 + by * .3 + bet2 * -.6 + bet1 * bet2 * .8 + x * by * bet1 * -.5 +     x * by * bet1 * bet2 * -.5 + rnorm(n, 5) + rnorm(n, -1, .1 * x^2) }) splot(y ~ x * by * bet_1 * bet_2 + cov_1 + cov_2 + cov_n) splot(   y = y, x = x, by = by, between = list(bet_1, bet_2), cov = list(cov_1, cov_2, cov_n) )"},{"path":"https://miserman.github.io/splot/articles/gallery.html","id":"density-plots","dir":"Articles","previous_headings":"","what":"Density plots","title":"Gallery","text":"","code":"# density distributions are drawn for single, numeric variables. # without a by variable, a histogram will also be drawn, # which you can color by the value or levels of another variable. splot(y, data, colorby = y) # by and between variables split the y variable, # showing the density distribution of each subset splot(y, data, by = by) # enter a matrix-like or list object as y to show # the density distributions of multiple variables. # internally, this stacks the columns/entries, # and treats variable names as by. splot(cbind(x, y), data)"},{"path":"https://miserman.github.io/splot/articles/gallery.html","id":"line-and-bar-plots","dir":"Articles","previous_headings":"","what":"Line and bar plots","title":"Gallery","text":"","code":"# if y is categorical, entering it with no x will show a bar plot by default. # you can add color based on the mean value or modal level of another variable. splot(group, data, colorby = x) # when x is categorical, the mean of y is shown at each level, # with error bars showing standard error by default splot(y ~ group, data) # lines are the default, but any line plot can also be represented with bars splot(y ~ group, data, type = \"bar\") # for bar and line plots, levels of x can be renamed and sorted. # the levels argument accepts a list of variable names. # each entry in the levels list can be a vector containing the order or # level names, or a list with a vector each for names and the order. splot(y ~ group, data, levels = list(   group = list(c(\"one\", \"two\", \"three\"), c(2, 3, 1)) )) # multiple y variable can also be displayed with lines or bars. # the mv.scale argument centers and scales (z-scores) each variable when TRUE, # or just centers them when FALSE or a character. splot(cbind(x, y) ~ bet1, data, mv.scale = \"center\") # multiple y variables can also be moved to the x axis, in which case x is moved to by splot(cbind(x, y) ~ bet1, data, mv.as.x = TRUE) # when by has many levels, you can color lines by another variable splot(y ~ by * id, data, colorby = y) # you can also group colors and add randomized shades with # shuffle = TRUE or method = 'related'. # additional arguments in a colorby list are passed to splot.color (see ?splot.color) splot(y ~ by * id, data, colorby = list(bet1, method = \"related\"))"},{"path":"https://miserman.github.io/splot/articles/gallery.html","id":"scatter-plots","dir":"Articles","previous_headings":"","what":"Scatter plots","title":"Gallery","text":"Brought Language Use Social Interaction lab Texas Tech University","code":"# any bar or line plot can also be represented as a scatter plot. # this shows the actual data, rather than error bars. splot(cbind(x, y) ~ bet1, data, type = \"scatter\") # You can also plot categorical variables in the y position splot(group ~ y, data) # if y has only two levels, you can display the probability # of the second class predicted by a logistic regression splot(by ~ y, data, lines = \"probability\") # when y and x are both continuous, a scatter plot is show by default. # in this which case, you can also color by a continuous variable. splot(y ~ x, data, colorby = y) # you can fit different models (loess or spline) to show bendy lines splot(y ~ x, data, lines = \"loess\") # or adjust the linear model with transformations of x splot(y ~ x + x^2 + x^3, data) # when splitting variables are included (by and/or between), # the model is fit to each subset splot(y ~ x * by * bet1 * bet2 + x^2 + x^3, data)"},{"path":[]},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"downloading-r","dir":"Articles","previous_headings":"Setting up","what":"Downloading R","title":"Introduction to R and splot","text":"Follow link matching system download R:Windows | Mac | Linux Windows, may see two versions, starting R i386 R x64. correspond 32 64 bit versions R. 64 bit version fine modern systems, run issues, might try 32 bit version.","code":""},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"installing-packages","dir":"Articles","previous_headings":"Setting up","what":"Installing packages","title":"Introduction to R and splot","text":"Packages offer additional functionality beyond base R, usually make certain processes easier. initial download R includes base packages, many packages available Comprehensive R Archive Network (CRAN). Packages can downloaded installed within R using install.packages function. example, install splot: first time install packages, ’ll need select mirror. CRAN hosts—files, different physical locations. Choose mirror geographically close best download speeds. package fails download, try changing mirrors.","code":"install.packages('splot')"},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"loading-packages","dir":"Articles","previous_headings":"Setting up","what":"Loading packages","title":"Introduction to R and splot","text":"time start R, packages aren’t part base R need loaded using library function. example:","code":"library(\"splot\")"},{"path":[]},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"the-underlying-system","dir":"Articles","previous_headings":"Understanding R","what":"The underlying system","title":"Introduction to R and splot","text":"interpreter. enter commands console, interpreter tries understand . might think understanding terms functions (operators) data (operands). example, enter 1 + 1 console, R understand 1 number, + function. Functions. Almost everything R function. functions called ( function; name function followed parentheses (e.g., sum()). Many functions accepts arguments—data entered inside parentheses, separated commas. example, sum(1, 2) call sum function, 1 first argument, 2 second argument. + function works , can also called ( function: 1 + 1 '+'(1, 1). functions output form data (+’s case, output single numeric value). means functions can entered arguments function. example, sum(sum(1, 1), 2) another call sum function, output sum(1, 1) first argument, 2 second argument.","code":""},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"data-representations","dir":"Articles","previous_headings":"Understanding R","what":"Data representations","title":"Introduction to R and splot","text":"follows, initial boxes (starting >) contain commands entered R console. box beneath initial box (marked ##) expected output.","code":""},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"matrices","dir":"Articles","previous_headings":"Understanding R > Data representations","what":"Matrices","title":"Introduction to R and splot","text":"Matrices store sets data. example, take look Motor Trend dataset, include base R: mtcars matrix, row represents particular car, column represents feature car (variable). can use ? function (?mtcars) access documentation. Note: base R, purely numerical matrices (made matrix function) matrices mixed data types (numerical character factor columns; made data.frame function). matrix representations, different methods (functions interact ). mtcars data.frame object (can see class function; class(mtcars)), methods used examples ([ function) also work standard matrix objects.","code":"mtcars #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"matrices-as-arguments","dir":"Articles","previous_headings":"Understanding R > Data representations","what":"Matrices as arguments","title":"Introduction to R and splot","text":"functions accept entire matrices arguments. example, colnames function output matrix’s column names:","code":"colnames(mtcars) #>  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\" #> [11] \"carb\""},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"vectors-as-arguments","dir":"Articles","previous_headings":"Understanding R > Data representations","what":"Vectors as arguments","title":"Introduction to R and splot","text":"functions accept values vectors (single columns rows, created independently c function) arguments. can use [ function select single columns rows name index. [’s first argument selects rows, second argument selects columns. example, can select mpg variable like (note variable names case sensitive): Fun note: [ function can also called ( function: '['(mtcars,, 'mpg'). Since [ function outputs vector, can enter argument another function, sum function: sum function handle multiple vectors single values entered individual arguments (sum(c(1, 2, 3)) sum(1, 2, 3)), functions expect vector first argument. instance mean(c(1, 2, 3)) gives average 1, 2, 3, whereas mean(1, 2, 3) mean(1), giving average 1. Check function’s documentation see expects—sum’s first argument ... meaning collapse additional arguments (without names matching arguments) first argument, whereas mean’s first argument x.","code":"mtcars[, \"mpg\"] #>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 #> [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 #> [31] 15.0 21.4 sum(mtcars[, \"mpg\"]) #> [1] 642.9"},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"visualizing-data-with-splot","dir":"Articles","previous_headings":"","what":"Visualizing data with splot","title":"Introduction to R and splot","text":"splot function generates sorts plots. first argument variable names, second argument dataset containing variables. See documentation information splot function (enter ?splot R console, view online).","code":""},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"distribution-of-a-single-variable","dir":"Articles","previous_headings":"Visualizing data with splot","what":"Distribution of a single variable","title":"Introduction to R and splot","text":"example, can look density distribution (histogram) mpg variable mtcars like : , bars depict frequency value-range cover (histogram part), line estimated theoretical distribution variable (cars sampled source, theoretically resemble distribution; e.g., cars go 15 20 miles per gallon).","code":"splot(mpg, mtcars)"},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"relationship-between-two-variables","dir":"Articles","previous_headings":"Visualizing data with splot","what":"Relationship between two variables","title":"Introduction to R and splot","text":"first argument splot function can entered formula, way specify relationships variables. first part formula tilde (~), separates y variable (tilde; vertical axis plot) x variable (tilde; horizontal axis plot). example, can look relationship mpg wt variables like : dot represents car, position combination miles per gallon (MPG) weight; higher vertically, miles can go per gallon gas, farther horizontally, weighs (tons). line linear regression, attempting predict y given x. example, data, regression see car weighed 3 tons, predict MPG around 22. Something might improve prediction (model fit) consider variables. Weight seems closely related MPG (going last plot), maybe MPG depends something else well, car’s style transmission (automatic versus manual). look , can add splitting variable formula asterisk (*). Splitting variables break data groups based value. example, separate cars automatic transmission (0) manual transmission (1), estimate line group. , seems (sample cars least) negative relationship weight MPG stronger among cars manual transmission; transmission appears moderate relationship weight MPG. , line cars manual transmissions steeper slope line cars automatic transmissions. Another way can improve model fit allowing prediction lines bend. particularly clear case seems help modeling relationship weight displacement: ^ function raises preceding vector following value, disp ^ 2 squared disp variable, disp ^ 3 cubed disp variable. transformations x increases prediction line’s ability bend. Maybe relationship displacement weight actually curvy like , might suspect just different types cars represented . example, kind looks like clusters data, one 200, one 200 400. can visualize splitting displacement points: cleans data nicely, wanted say clusters actually represent different types cars, convincing find another variable defines groups like .","code":"splot(mpg ~ wt, mtcars) splot(mpg ~ wt * am, mtcars) splot(wt ~ disp + disp^2 + disp^3, mtcars) splot(wt ~ disp * disp, mtcars, split = c(200, 400))"},{"path":"https://miserman.github.io/splot/articles/intro.html","id":"categorical-variables","dir":"Articles","previous_headings":"Visualizing data with splot","what":"Categorical variables","title":"Introduction to R and splot","text":"started looking mpg variable , since dataset named entries (unlike sets less meaningful rows like participant IDs), might informative visualize MPG entry: , additional arguments changing aspects display way show default: type argument sets look data (bars rather lines points), sort argument changes way x variable ordered (y’s value rather alphabetically). splot function many arguments mostly affect way element figure displayed. example, figure, might want adjust range y axis (myl argument), maybe make labels informative (laby labx arguments):  explore data broadly might look variables . can entered matrix y position: mv..x argument saying columns y displayed levels x axis (“mv” stands “multiple variables”). Otherwise, displayed levels variable, MPG x axis. type plot commonly displayed bar plot, lines sometimes taken imply ’s movement levels (participants experiencing different conditions; within-person experimental designs). Another way interpret lines, however, regression lines. particularly clear look raw data representing line plot scatter plot: xlas argument sets orientation x axis labels (since default vertical scatter plots), lpos argument sets position legend. representation isn’t informative terms data (lot overlap level variable), lines actually prediction lines regressions. line plot depicts part regression: line crosses x axis label mean data represented line within level; error bars show standard errors around means (correspond p-value associated t test; cross, difference non-significant); slope line levels corresponds associated beta weight. sense, line plot can somewhat informative bar plot. applied examples, see explore refine vignettes. splot specific information, see style guide full documentation. Brought Language Use Social Interaction lab Texas Tech University","code":"splot(mpg ~ rownames(mtcars), mtcars, type = \"bar\", sort = TRUE) splot(   mpg ~ rownames(mtcars), mtcars,   type = \"bar\", sort = TRUE,   myl = c(10, 35), laby = \"Miles Per Gallon\", labx = \"Car\" ) splot(mtcars[, c(\"cyl\", \"carb\", \"gear\")] ~ mpg, mtcars, mv.as.x = TRUE) splot(   mtcars[, c(\"cyl\", \"carb\", \"gear\")] ~ mpg, mtcars,   mv.as.x = TRUE, type = \"scatter\", xlas = 1, lpos = \"topright\" )"},{"path":"https://miserman.github.io/splot/articles/refine.html","id":"setting-up","dir":"Articles","previous_headings":"","what":"Setting up","title":"Preparing a Particular Result with splot","text":"First, sure splot loaded: load data attach (can take little ):","code":"library(splot) data <- read.csv(\"https://osf.io/ey9hs/?action=download\", fileEncoding = \"ISO-8859-1\") attach(data)"},{"path":"https://miserman.github.io/splot/articles/refine.html","id":"anger-word-usage","dir":"Articles","previous_headings":"","what":"Anger Word Usage","title":"Preparing a Particular Result with splot","text":"Texts split 100 segments (index variable), identified author (name variable). look particular category across segments text, can just plot category index, name position:  Quite messy, legend drawn automatically many levels . add arranged legend, get rid points clean things bit: many levels , legend isn’t useful, might just keep . ’re also interested non-linear trends course text, ’ll switch loess lines, ’ll use myl zoom (restrict range) bit:  Prettier least, still informative. project mostly interested Rodger text—relates Hitler text, relate autobiographies. , nice know lines Rodger Hitler texts, (case) highest comparison texts. , ’ll first set line types colors outside splot: Now within splot (using add argument), can always mark Rodger Hitler text, dynamically display set comparison texts. , mnc part calculating mean text across segments, sorting names mean pulling highest 2. lowest 2 pulled changing TRUE FALSE. first legend call, constants position (set first argument), line weight (lwd) box type (bty; 'n' none). Dynamic arguments pulled disp object created , based names mnc.  planning applying settings several graphs (, say, wanted look several different y variables individually), add consistent stuff options list: can save room least:","code":"splot(anger ~ index * name) # lpos positions, ncol changes the number of columns, and # cex['leg'] changes the font size of the legend. splot(anger ~ index * name, lpos = \"top\", ncol = 4, cex = c(leg = .8), points = FALSE) splot(anger ~ index * name, points = FALSE, lines = loess, myl = c(-.05, 1.7)) ns <- unique(data$name) nl <- length(ns) disp <- data.frame(name = ns, lty = rep_len(1:9, nl)) disp$col <- ifelse(grepl(\"Hit|Rod\", disp$name), \"#880101\", \"#aaaaaa\") disp$lty[grepl(\"Hit|Rod\", disp$name)] <- 1:2  # now we have an object with names associated with line types (lty) and colors (col): disp[1:10, ] #>                   name lty     col #> 1          Henry Adams   1 #aaaaaa #> 2  Elizabeth von Arnim   2 #aaaaaa #> 3      Margot  Asquith   3 #aaaaaa #> 4       Clifford Beers   4 #aaaaaa #> 5         Annie Besant   5 #aaaaaa #> 6          George Airy   6 #aaaaaa #> 7           Black Hawk   7 #aaaaaa #> 8         William Cody   8 #aaaaaa #> 9           Henry Coke   9 #aaaaaa #> 10       Joseph Conrad   1 #aaaaaa splot(anger ~ index * name,   points = FALSE, lines = \"loess\", myl = c(0, 2.2), colors = disp$col, lty = disp$lty,   add = {     mnc <- names(sort(       colMeans(sapply(cdat$`.^^.`, \"[[\", \"y\"))[-grep(\"Hit|Rod\", names(cdat$`.^^.`))],       TRUE     )[1:2])     legend(\"topleft\", sort(mnc),       lty = disp[disp$name %in% mnc, 2], col = disp[disp$name %in% mnc, 3],       lwd = 2, bty = \"n\"     )     legend(       \"topright\", c(\"Adolf Hitler\", \"Elliot Rodger\"),       lty = 1:2, col = disp$col[grep(\"Hit|Rod\", disp$name)], lwd = 2, bty = \"n\"     )   } ) # quote() prevents things from being evaluated outside of the function. opt <- list(   points = FALSE,   lines = \"loess\",   colors = disp$col,   lty = disp$lty,   add = quote({     mnc <- names(sort(colMeans(sapply(cdat$`.^^.`, \"[[\", \"y\"))[-grep(       \"Hit|Rod\",       names(cdat$`.^^.`)     )], TRUE)[1:2])     legend(\"topleft\", sort(mnc),       lty = disp[disp$name %in% mnc, 2], col = disp[disp$name %in% mnc, 3],       lwd = 2, bty = \"n\"     )     legend(\"topright\", c(\"Adolf Hitler\", \"Elliot Rodger\"),       lty = 1:2,       col = disp$col[grep(\"Hit|Rod\", disp$name)], lwd = 2, bty = \"n\"     )   }) ) splot(death ~ index * name, myl = c(0, 1.35), options = opt)"},{"path":"https://miserman.github.io/splot/articles/refine.html","id":"comparison-of-pronoun-usage","dir":"Articles","previous_headings":"","what":"Comparison of Pronoun Usage","title":"Preparing a Particular Result with splot","text":"might want look variables time. dataset, difference pronoun use Rodger Hitler text interesting, ’ll look personal pronouns (, , , shehe, ) impersonal pronouns (ipron) together:  better compare variable texts, can put variables x axis mv..x=TRUE, z-score mv.scale=TRUE standardize ranges. ’re , ’ll also pretty things better axis titles, removing subset message (can done sub=FALSE just subsetting data), changing colors legend position:","code":"splot(   cbind(i, we, you, shehe, they, ipron) ~ name,   type = \"bar\", su = grepl(\"Hit|Rod\", name) ) splot(   cbind(i, we, you, shehe, they, ipron) ~ name,   type = \"bar\", mv.as.x = TRUE, mv.scale = TRUE,   data = data[grep(\"Hit|Rod\", data$name), ], title = \"Pronoun Usage between Texts\",   laby = \"Pronouns (z-scored)\", labx = \"Category\", colors = \"grey\", leg.title = FALSE )"},{"path":"https://miserman.github.io/splot/articles/refine.html","id":"saving-figures","dir":"Articles","previous_headings":"","what":"Saving Figures","title":"Preparing a Particular Result with splot","text":"Now formatted figures, might want use things. comes rendering, two factors make nicest looking figures: anti-aliasing (making lines less pixelated) scalability (won’t become pixelated zoomed ; feature vector-based formats like pdf, svg, emf). Using vector-based formats means can preserve scale plot without losing quality; , want larger text compact elements, can adjust plot window rerender plot proportions look right. Even window small, can blow vector based image size. default format saving within splot (save=TRUE) pdf (using cairo_pdf). ’re using RStudio, can save quality pdf Export dropdown. svg generally best format anti-aliased, scalable images (format=svg). can included newer versions Word PowerPoint, editable Inkscape among things (even text editors!). older versions Word PowerPoint, emfs can used instead svgs. save anti-aliased emfs, can install load devEMF package (install.packages('devEMF'); library('devEMF')), add format=emf plot want save. Brought Language Use Social Interaction lab Texas Tech University","code":""},{"path":[]},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"downloading-r","dir":"Articles","previous_headings":"Setting up","what":"Downloading R","title":"Introduction to R and splot","text":"Follow link matching system download R:Windows | Mac | Linux Windows, may see two versions, starting R i386 R x64. correspond 32 64 bit versions R. 64 bit version fine modern systems, run issues, might try 32 bit version.","code":""},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"installing-packages","dir":"Articles","previous_headings":"Setting up","what":"Installing packages","title":"Introduction to R and splot","text":"Packages offer additional functionality beyond base R, usually make certain processes easier. initial download R includes base packages, many packages available Comprehensive R Archive Network (CRAN). Packages can downloaded installed within R using install.packages function. example, install splot: first time install packages, ’ll need select mirror. CRAN hosts—files, different physical locations. Choose mirror geographically close best download speeds. package fails download, try changing mirrors.","code":"install.packages('splot')"},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"loading-packages","dir":"Articles","previous_headings":"Setting up","what":"Loading packages","title":"Introduction to R and splot","text":"time start R, packages aren’t part base R need loaded using library function. example:","code":"library(\"splot\")"},{"path":[]},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"the-underlying-system","dir":"Articles","previous_headings":"Understanding R","what":"The underlying system","title":"Introduction to R and splot","text":"interpreter. enter commands console, interpreter tries understand . might think understanding terms functions (operators) data (operands). example, enter 1 + 1 console, R understand 1 number, + function. Functions. Almost everything R function. functions called ( function; name function followed parentheses (e.g., sum()). Many functions accepts arguments—data entered inside parentheses, separated commas. example, sum(1, 2) call sum function, 1 first argument, 2 second argument. + function works , can also called ( function: 1 + 1 '+'(1, 1). functions output form data (+’s case, output single numeric value). means functions can entered arguments function. example, sum(sum(1, 1), 2) another call sum function, output sum(1, 1) first argument, 2 second argument.","code":""},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"data-representations","dir":"Articles","previous_headings":"Understanding R","what":"Data representations","title":"Introduction to R and splot","text":"follows, outlined code boxes contain syntax highlighted code can run R console, followed expected output (preceded #>).","code":""},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"matrices","dir":"Articles","previous_headings":"Understanding R > Data representations","what":"Matrices","title":"Introduction to R and splot","text":"Matrices store sets data. example, take look Motor Trend dataset, include base R: mtcars matrix, row represents particular car, column represents feature car (variable). can use ? function (?mtcars) access documentation. Note: base R, purely numerical matrices (made matrix function) matrices mixed data types (numerical character factor columns; made data.frame function). matrix representations, different methods (functions interact ). mtcars data.frame object (can see class function; class(mtcars)), methods used examples ([ function) also work standard matrix objects.","code":"mtcars #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"matrices-as-arguments","dir":"Articles","previous_headings":"Understanding R > Data representations","what":"Matrices as arguments","title":"Introduction to R and splot","text":"functions accept entire matrices arguments. example, colnames function output matrix’s column names:","code":"colnames(mtcars) #>  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\" #> [11] \"carb\""},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"vectors-as-arguments","dir":"Articles","previous_headings":"Understanding R > Data representations","what":"Vectors as arguments","title":"Introduction to R and splot","text":"functions accept values vectors (single columns rows, created independently c function) arguments. can use [ function select single columns rows name index. [’s first argument selects rows, second argument selects columns. example, can select mpg variable like (note variable names case sensitive): Fun note: [ function can also called ( function: '['(mtcars,, 'mpg'). Since [ function outputs vector, can enter argument another function, sum function: sum function handle multiple vectors single values entered individual arguments (sum(c(1, 2, 3)) sum(1, 2, 3)), functions expect vector first argument. instance mean(c(1, 2, 3)) gives average 1, 2, 3, whereas mean(1, 2, 3) mean(1), giving average 1. Check function’s documentation see expects—sum’s first argument ... meaning collapse additional arguments (without names matching arguments) first argument, whereas mean’s first argument x.","code":"mtcars[, \"mpg\"] #>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 #> [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 #> [31] 15.0 21.4 sum(mtcars[, \"mpg\"]) #> [1] 642.9"},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"visualizing-data-with-splot","dir":"Articles","previous_headings":"","what":"Visualizing data with splot","title":"Introduction to R and splot","text":"splot function generates sorts plots. first argument variable names, second argument dataset containing variables. See documentation information splot function (enter ?splot R console, view online).","code":""},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"distribution-of-a-single-variable","dir":"Articles","previous_headings":"Visualizing data with splot","what":"Distribution of a single variable","title":"Introduction to R and splot","text":"example, can look density distribution (histogram) mpg variable mtcars like : , bars depict frequency value-range cover (histogram part), line estimated theoretical distribution variable (cars sampled source, theoretically resemble distribution; e.g., cars go 15 20 miles per gallon).","code":"splot(mpg, mtcars)"},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"relationship-between-two-variables","dir":"Articles","previous_headings":"Visualizing data with splot","what":"Relationship between two variables","title":"Introduction to R and splot","text":"first argument splot function can entered formula, way specify relationships variables. first part formula tilde (~), separates y variable (tilde; vertical axis plot) x variable (tilde; horizontal axis plot). example, can look relationship mpg wt variables like : dot represents car, position combination miles per gallon (MPG) weight; higher vertically, miles can go per gallon gas, farther horizontally, weighs (tons). line linear regression, attempting predict y given x. example, data, regression see car weighed 3 tons, predict MPG around 22. Something might improve prediction (model fit) consider variables. Weight seems closely related MPG (going last plot), maybe MPG depends something else well, car’s style transmission (automatic versus manual). look , can add splitting variable formula asterisk (*). Splitting variables break data groups based value. example, separate cars automatic transmission (0) manual transmission (1), estimate line group. , seems (sample cars least) negative relationship weight MPG stronger among cars manual transmission; transmission appears moderate relationship weight MPG. , line cars manual transmissions steeper slope line cars automatic transmissions. Another way can improve model fit allowing prediction lines bend. particularly clear case seems help modeling relationship weight displacement: ^ function raises preceding vector following value, disp ^ 2 squared disp variable, disp ^ 3 cubed disp variable. transformations x increases prediction line’s ability bend. Maybe relationship displacement weight actually curvy like , might suspect just different types cars represented . example, kind looks like clusters data, one 200, one 200 400. can visualize splitting displacement points: cleans data nicely, wanted say clusters actually represent different types cars, convincing find another variable defines groups like .","code":"splot(mpg ~ wt, mtcars) splot(mpg ~ wt * am, mtcars) splot(wt ~ disp + disp^2 + disp^3, mtcars) splot(wt ~ disp * disp, mtcars, split = c(200, 400))"},{"path":"https://miserman.github.io/splot/articles/splot.html","id":"categorical-variables","dir":"Articles","previous_headings":"Visualizing data with splot","what":"Categorical variables","title":"Introduction to R and splot","text":"started looking mpg variable , since dataset named entries (unlike sets less meaningful rows like participant IDs), might informative visualize MPG entry: , additional arguments changing aspects display way show default: type argument sets look data (bars rather lines points), sort argument changes way x variable ordered (y’s value rather alphabetically). splot function many arguments mostly affect way element figure displayed. example, figure, might want adjust range y axis (myl argument), maybe make labels informative (laby labx arguments):  explore data broadly might look variables . can entered matrix y position: mv..x argument saying columns y displayed levels x axis (“mv” stands “multiple variables”). Otherwise, displayed levels variable, MPG x axis. type plot commonly displayed bar plot, lines sometimes taken imply ’s movement levels (participants experiencing different conditions; within-person experimental designs). Another way interpret lines, however, regression lines. particularly clear look raw data representing line plot scatter plot: xlas argument sets orientation x axis labels (since default vertical scatter plots), lpos argument sets position legend. representation isn’t informative terms data (lot overlap level variable), lines actually prediction lines regressions. line plot depicts part regression: line crosses x axis label mean data represented line within level; error bars show standard errors around means (correspond p-value associated t test; cross, difference non-significant); slope line levels corresponds associated beta weight. sense, line plot can somewhat informative bar plot. applied examples, see explore refine vignettes. splot specific information, see style guide full documentation. Brought Language Use Social Interaction lab Texas Tech University","code":"splot(mpg ~ rownames(mtcars), mtcars, type = \"bar\", sort = TRUE) splot(   mpg ~ rownames(mtcars), mtcars,   type = \"bar\", sort = TRUE,   myl = c(10, 35), laby = \"Miles Per Gallon\", labx = \"Car\" ) splot(mtcars[, c(\"cyl\", \"carb\", \"gear\")] ~ mpg, mtcars, mv.as.x = TRUE) splot(   mtcars[, c(\"cyl\", \"carb\", \"gear\")] ~ mpg, mtcars,   mv.as.x = TRUE, type = \"scatter\", xlas = 1, lpos = \"topright\" )"},{"path":"https://miserman.github.io/splot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Micah Iserman. Maintainer.","code":""},{"path":"https://miserman.github.io/splot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Iserman M (2023). splot: Split Plot. R package version 0.5.3, https://miserman.github.io/splot/.","code":"@Manual{,   title = {splot: Split Plot},   author = {Micah Iserman},   year = {2023},   note = {R package version 0.5.3},   url = {https://miserman.github.io/splot/}, }"},{"path":"https://miserman.github.io/splot/index.html","id":"splot","dir":"","previous_headings":"","what":"Split Plot","title":"Split Plot","text":"R package ease data visualization. aim package make visualization early part data analysis process automating common plotting tasks. terms design, three general principles: Flexibility: splot prefers try make reasonable plot input, rather erroring . Minimal specification: able make plots just formula input, formula generally compatible multiple plot types, regardless variable types. Tweakability: Though splot focused quick, automated plotting, able adjust aspect display additional arguments, find plot want display elsewhere.","code":""},{"path":"https://miserman.github.io/splot/index.html","id":"features","dir":"","previous_headings":"","what":"features","title":"Split Plot","text":"entering formula first argument splot function (e.g., splot(y ~ x)), can make Density distributions (overlaid histograms variable) Scatter plots prediction lines Bar line graphs error bars type, multiple y variables data levels variable shown plot frame, data levels one two variables shown separate plot frames, organized grid.","code":""},{"path":"https://miserman.github.io/splot/index.html","id":"resources","dir":"","previous_headings":"","what":"resources","title":"Split Plot","text":"Introduction Documentation Style Guide Gallery Applied examples: Exploring Data | Refining Result","code":""},{"path":"https://miserman.github.io/splot/index.html","id":"installation","dir":"","previous_headings":"","what":"installation","title":"Split Plot","text":"Download R r-project.org. Release (version 0.5.2) Development (version 0.5.3) load package:","code":"install.packages('splot') # install.packages('remotes') remotes::install_github('miserman/splot') library(splot)"},{"path":"https://miserman.github.io/splot/index.html","id":"examples","dir":"","previous_headings":"","what":"examples","title":"Split Plot","text":"Make data: random group x variables, y variable related x: distribution y: scatter plot y x: data quadratic model: data separated group: also separate median standard deviations x: Summarize bar plot: Two-level y variable probability prediction line:","code":"group = rep(c('group 1', 'group 2'), 50) x = rnorm(100) y = x * .5 + rnorm(100) splot(y) splot(y ~ x) splot(y ~ x + x^2 + x^3) splot(y ~ x * group) splot(y ~ x * x) splot(y ~ x * x, split='sd') splot(y ~ x * group, type='bar') # make some new data for this example: # a discrete y variable and related x variable: y_bin = rep(c(1, 5), 50) x_con = y_bin * .4 + rnorm(100)  # lines = 'prob' for a prediction line from a logistic model: splot(y_bin ~ x_con, lines = 'prob')"},{"path":"https://miserman.github.io/splot/reference/splot.bench.html","id":null,"dir":"Reference","previous_headings":"","what":"splot benchmarker — splot.bench","title":"splot benchmarker — splot.bench","text":"Time one expressions several iteration, plot distributions times.","code":""},{"path":"https://miserman.github.io/splot/reference/splot.bench.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"splot benchmarker — splot.bench","text":"","code":"splot.bench(..., runs = 20, runsize = 200, cleanup = FALSE,   print.names = FALSE, limit.outliers = TRUE, check_output = TRUE,   check_args = list(), options = list())"},{"path":"https://miserman.github.io/splot/reference/splot.bench.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"splot benchmarker — splot.bench","text":"... accepts number expressions timed. See examples. runs number overall iterations. Increase stabilize estimates. runsize number times expression evaluated within run. Increase differentiate estimates (particularly fast operations). cleanup logical; TRUE, garbage collection performed run. Garbage collection greatly increases run time, may result stable timings. print.names logical; FALSE, entered expressions included plot legend names. Otherwise, (number expressions 5 length expression 50 characters) expressions replaced numbers corresponding entered position. limit.outliers logical; TRUE (default), times upper bound given expression set upper bound, removing aberrant extremes. check_output logical; TRUE, output expression checked .equal first. warning indicates equal, results invisibly returned. check_args list arguments passed .equal, check_output TRUE. options list options pass splot.","code":""},{"path":"https://miserman.github.io/splot/reference/splot.bench.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"splot benchmarker — splot.bench","text":"list:","code":""},{"path":"https://miserman.github.io/splot/reference/splot.bench.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"splot benchmarker — splot.bench","text":"","code":"# increase the number of runs for more stable estimates  # compare ways of looping through a vector splot.bench(   sapply(1:100, \"*\", 10),   mapply(\"*\", 1:100, 10),   vapply(1:100, \"*\", 0, 10),   unlist(lapply(1:100, \"*\", 10)),   runs = 20, runsize = 200, check_output = TRUE ) #> benchmarking 4 expression(s) in chunks of 200 per run...  #> run 0 of 20 run 1 of 20 run 2 of 20 run 3 of 20 run 4 of 20 run 5 of 20 run 6 of 20 run 7 of 20 run 8 of 20 run 9 of 20 run 10 of 20 run 11 of 20 run 12 of 20 run 13 of 20 run 14 of 20 run 15 of 20 run 16 of 20 run 17 of 20 run 18 of 20 run 19 of 20 run 20 of 20 finished 20 runs in 1 seconds        #>  #> expressions: #>  #> 1. sapply(1:100, \"*\", 10) #> 2. mapply(\"*\", 1:100, 10) #> 3. vapply(1:100, \"*\", 0, 10) #> 4. unlist(lapply(1:100, \"*\", 10)) #>  #>                           1      2     3      4 #> total time (seconds) 0.2800 0.3400 0.180 0.2000 #> mean time per run    0.0140 0.0170 0.009 0.0100 #> times the minimum    1.5556 1.8889 1.000 1.1111   # compare ways of setting all but the maximum value of each row in a matrix to 0 if (FALSE) {  mat <- matrix(c(rep(1, 4), rep(0, 8)), 4, 3) splot.bench(   t(vapply(seq_len(4), function(r) {     mat[r, mat[r, ] < max(mat[r, ])] <- 0     mat[r, ]   }, numeric(ncol(mat)))),   do.call(rbind, lapply(seq_len(4), function(r) {     mat[r, mat[r, ] < max(mat[r, ])] <- 0     mat[r, ]   })),   do.call(rbind, lapply(seq_len(4), function(r) {     nr <- mat[r, ]     nr[nr < max(nr)] <- 0     nr   })),   {     nm <- mat     for (r in seq_len(4)) {       nr <- nm[r, ]       nm[r, nr < max(nr)] <- 0     }     nm   },   {     nm <- mat     for (r in seq_len(4)) nm[r, nm[r, ] < max(nm[r, ])] <- 0     nm   },   {     nm <- matrix(0, dim(mat)[1], dim(mat)[2])     for (r in seq_len(4)) {       m <- which.max(mat[r, ])       nm[r, m] <- mat[r, m]     }     nm   },   {     ck <- do.call(rbind, lapply(seq_len(4), function(r) {       nr <- mat[r, ]       nr < max(nr)     }))     nm <- mat     nm[ck] <- 0     nm   },   t(apply(mat, 1, function(r) {     r[r < max(r)] <- 0     r   })),   runs = 50,   runsize = 200,   check_output = TRUE ) }"},{"path":"https://miserman.github.io/splot/reference/splot.color.html","id":null,"dir":"Reference","previous_headings":"","what":"splot colors — splot.color","title":"splot colors — splot.color","text":"Get prespecified set 9 colors, set graded random, potentially grouped colors.","code":""},{"path":"https://miserman.github.io/splot/reference/splot.color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"splot colors — splot.color","text":"","code":"splot.color(x = NULL, by = NULL, seed = \"pastel\", brightness = 0,   luminance = 0, opacity = 1, extend = 0.7, lighten = FALSE,   shuffle = FALSE, flat = TRUE, method = \"scale\", grade = FALSE,   decreasing = FALSE, nas = \"#000000\")"},{"path":"https://miserman.github.io/splot/reference/splot.color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"splot colors — splot.color","text":"x dictates number shade colors. single value, returns many samples first seed entry. vector, returns color entry. numeric, single seed color sampled order vector. character factor, separate seed color assigned level, sampled within levels. Values vectors list assigned seed color. vector group x ; level assigned seed color. seed vector color names codes adjust , lining levels x , name palette, partially matching 'bright', 'dark', 'pastel', 'grey'. brightness adjusts RGB values seed color, usually -1 1. luminance adjusts white levels seed color, usually -1 1. opacity sets opacity seed color, 0 1. extend method='scale', extends range gradient beyond sampled range, making similar colors (defaults .5, 0 sampling full range). method='related', increases amount RGB values can adjusted, making potentially different colors (default 2). lighten logical; TRUE, scaled colors lightened instead darkened. applicable method='scale'. shuffle logical; TRUE, scaled colors shuffled. applicable method='scale'. flat logical; FALSE x character, factor, list, missing, list returned. method character setting sampling method: 'related' ('^rel|^ran|^o'), RGB values freely adjusted, resulting similar colors. 'none' ('^|^f|^bin'), Seed colors simply repeated level (sampling ). Otherwise, RGB values adjusted together, resulting gradient. grade logical; TRUE, seeds adjusted scale numeric xs. Otherwise, seeds adjusted even steps along numeric xs. decreasing logical; FALSE, assigns colors numeric xs increasing order. nas value replace missing values .","code":""},{"path":"https://miserman.github.io/splot/reference/splot.color.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"splot colors — splot.color","text":"x specified (characters length 1, case treated seed), seed palette returned. expand palette, seed colors assigned groups, variants seed assigned values levels within groups, randomly gradient values level assign . Seed colors assigned groups. x character factor specified, groups unique levels x. specified character factor, fewer 10 unique levels, groups levels . x list, groups list entries. number variants seed color determined either value (value length 1; e.g., x=10), vector's length (x numeric), count given level (x factor character vector).","code":""},{"path":"https://miserman.github.io/splot/reference/splot.color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"splot colors — splot.color","text":"","code":"# including no arguments or just a palette name will only return # the palette as a character vector pastel_palette <- splot.color() dark_palette <- splot.color(\"dark\")  # entering a number for x will generate that many variants of the first seed color red_scale <- splot.color(10, \"red\")  # entering a list of values as x will return that many variants of the associated seed red_and_green_scales <- splot.color(list(10, 10), seed = c(\"red\", \"green\"))  # this shows gradients of each color in the default palette # a list entered as colorby is treated as arguments to splot.color # periods before the position name refer to the internally assembled data splot(   rep(splot.color(), each = 100) ~ rep.int(seq.int(.01, 1, .01), 9),   colorby = list(.x, .y),   lines = FALSE, mar = c(2, 4, 0, 0), cex = c(points = 3), leg = FALSE, pch = 15,   title = \"'pastel' palette\", labx = \"value of x\", laby = \"seed color\" )   # colors graded by value, entered in a list plot(   1:30, numeric(30),   pch = 15, cex = 10,   col = splot.color(list(1:8, c(7:1, 1:7), 8:1)) )   # comparing sampling methods: #   on top are 1000 similar colors, with different RGB ratios #   on bottom are 268 colors with the same RGB ratio at different levels splot(   c(rnorm(1000), rnorm(1000, 10)) ~ rnorm(2000),   lines = FALSE,   colors = c(splot.color(1000), splot.color(1000, method = \"related\")) )"},{"path":"https://miserman.github.io/splot/reference/splot.colorcontrast.html","id":null,"dir":"Reference","previous_headings":"","what":"splot color contrast ratio — splot.colorcontrast","title":"splot color contrast ratio — splot.colorcontrast","text":"Calculates color contrast ratio two sets colors, defined World Wide Web Consortium.","code":""},{"path":"https://miserman.github.io/splot/reference/splot.colorcontrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"splot color contrast ratio — splot.colorcontrast","text":"","code":"splot.colorcontrast(color, background = \"#ffffff\", plot = TRUE)"},{"path":"https://miserman.github.io/splot/reference/splot.colorcontrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"splot color contrast ratio — splot.colorcontrast","text":"color, background character vector colors, matrix RGB values across rows. plot Logical; FALSE, plot results.","code":""},{"path":"https://miserman.github.io/splot/reference/splot.colorcontrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"splot color contrast ratio — splot.colorcontrast","text":"list entries ratio (contrast ratio), AA (ratios least 4.5), AAA (ratios least 7). entry contains matrix colors rows backgrounds columns.","code":""},{"path":"https://miserman.github.io/splot/reference/splot.colorcontrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"splot color contrast ratio — splot.colorcontrast","text":"","code":"# check colors against dark and light backgrounds splot.colorcontrast(c(\"#FF0000\", \"#00FF00\", \"#0000FF\"), c(\"black\", \"white\"))  #> $ratio #>          black    white #> #FF0000  5.252 3.998477 #> #00FF00 15.304 1.372190 #> #0000FF  2.444 8.592471 #>  #> $AA #>         black white #> #FF0000  TRUE FALSE #> #00FF00  TRUE FALSE #> #0000FF FALSE  TRUE #>  #> $AAA #>         black white #> #FF0000 FALSE FALSE #> #00FF00  TRUE FALSE #> #0000FF FALSE  TRUE #>   # check contrast between colors splot.colorcontrast(c(\"red\", \"green\", \"blue\"), c(\"red\", \"green\", \"blue\"))  #> $ratio #>            red    green     blue #> red   1.000000 2.913938 2.148936 #> green 2.913938 1.000000 6.261866 #> blue  2.148936 6.261866 1.000000 #>  #> $AA #>         red green  blue #> red   FALSE FALSE FALSE #> green FALSE FALSE  TRUE #> blue  FALSE  TRUE FALSE #>  #> $AAA #>         red green  blue #> red   FALSE FALSE FALSE #> green FALSE FALSE FALSE #> blue  FALSE FALSE FALSE #>   # see when shades of a color cross thresholds on a given background splot.colorcontrast(splot.color(1:10, seed = \"#a388b5\"), \"#101010\")  #> $ratio #>          #101010 #> #A388B5 6.112743 #> #9980AA 5.457068 #> #9078A0 4.874875 #> #867095 4.317859 #> #7D688A 3.822943 #> #736080 3.365093 #> #695875 2.947918 #> #60506A 2.585055 #> #564860 2.257584 #> #4D4055 1.975381 #>  #> $AA #>         #101010 #> #A388B5    TRUE #> #9980AA    TRUE #> #9078A0    TRUE #> #867095   FALSE #> #7D688A   FALSE #> #736080   FALSE #> #695875   FALSE #> #60506A   FALSE #> #564860   FALSE #> #4D4055   FALSE #>  #> $AAA #>         #101010 #> #A388B5   FALSE #> #9980AA   FALSE #> #9078A0   FALSE #> #867095   FALSE #> #7D688A   FALSE #> #736080   FALSE #> #695875   FALSE #> #60506A   FALSE #> #564860   FALSE #> #4D4055   FALSE #>"},{"path":"https://miserman.github.io/splot/reference/splot.colormean.html","id":null,"dir":"Reference","previous_headings":"","what":"splot color average — splot.colormean","title":"splot color average — splot.colormean","text":"Calculates average set colors, returning Hex code.","code":""},{"path":"https://miserman.github.io/splot/reference/splot.colormean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"splot color average — splot.colormean","text":"","code":"splot.colormean(...)"},{"path":"https://miserman.github.io/splot/reference/splot.colormean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"splot color average — splot.colormean","text":"... color codes names characters.","code":""},{"path":"https://miserman.github.io/splot/reference/splot.colormean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"splot color average — splot.colormean","text":"","code":"# average of red and blue plot(   1:3, numeric(3),   pch = 15, cex = 20, xlim = c(0, 4),   col = c(\"red\", splot.colormean(\"red\", \"blue\"), \"blue\") )   # average of a set x <- rnorm(100) set <- splot.color(x, method = \"related\") splot(   x ~ rnorm(100),   colors = set,   add = points(0, 0, pch = 15, cex = 10, col = splot.colormean(set)) )"},{"path":"https://miserman.github.io/splot/reference/splot.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Plot — splot","title":"Split Plot — splot","text":"plotting function aimed automating common visualization tasks order ease data exploration.","code":""},{"path":"https://miserman.github.io/splot/reference/splot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Plot — splot","text":"","code":"splot(y, data = NULL, su = NULL, type = \"\", split = \"median\",   levels = list(), sort = NULL, error = \"standard\",   error.color = \"#585858\", error.lwd = 2, lim = 9, lines = TRUE, ...,   colors = \"pastel\", colorby = NULL, colorby.leg = TRUE,   color.lock = FALSE, color.offset = 1.1, color.summary = \"mean\",   opacity = 1, dark = getOption(\"splot.dark\", FALSE), x = NULL,   by = NULL, between = NULL, cov = NULL, line.type = \"l\",   mv.scale = \"none\", mv.as.x = FALSE, save = FALSE, format = cairo_pdf,   dims = dev.size(), file.name = \"splot\", myl = NULL, mxl = NULL,   autori = TRUE, xlas = 0, ylas = 1, xaxis = TRUE, yaxis = TRUE,   breaks = \"sturges\", density.fill = TRUE, density.opacity = 0.4,   density.args = list(), leg = \"outside\", lpos = \"auto\", lvn = TRUE,   leg.title = TRUE, leg.args = list(), title = TRUE, labx = TRUE,   laby = TRUE, lty = TRUE, lwd = 2, sub = TRUE, ndisp = TRUE,   note = TRUE, font = c(title = 2, sud = 1, leg = 1, leg.title = 2, note =   3), cex = c(title = 1.5, sud = 0.9, leg = 0.9, note = 0.7, points = 1),   sud = TRUE, labels = TRUE, labels.filter = \"_\", labels.trim = 20,   points = TRUE, points.first = TRUE, byx = TRUE, drop = c(x = TRUE, by   = TRUE, bet = TRUE), prat = c(1, 1), check.height = TRUE,   model = FALSE, options = NULL, add = NULL)"},{"path":"https://miserman.github.io/splot/reference/splot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Plot — splot","text":"y formula (see note), primary variable(s) shown y axis (unless x specified). formula, can one variables objects, names data. data data.frame pull variables . variables found data, looked environment. su subset variables, applied retrieved data environment. type determines type plot make, \"bar\", \"line\", \"density\", \"scatter\". \"density\", x ignored. Anything including first letter accepted (e.g., type='l'). split split continuous variables (lim levels factors). Default \"median\", \"mean\", \"standard deviation\", \"quantile\", numbers options. numbers, variable either cut value vector, broken roughly equal chunks. Entering integer (e.g., split = 3L) greater 1 force splitting segments. Otherwise variables split value enter single value split least two data less equal greater split, enter 1 value split. numeric split compatible splitting value segment, splitting default median. levels list entries corresponding variable names, used rename /reorder factor levels. reorder factor, enter vector either numbers existing level names new order (e.g., levels = list(var = c(3,2,1))). rename levels factor, enter character vector length number levels. rename reorder, enter list, names first entry, order second entry (e.g., levels = list(var = list(c('','b','c'), c(3,2,1)))). happens variables split, names orders correspond new split levels split variables. example, continuous variable median split, now two levels ('Median' 'Median'), levels reordering renaming apply . Multiple variables entered y can renamed sorted entry titled 'mv'. sort specified order character factor x levels. default, character factor x levels sorted alphabetically. FALSE prevent (preserving entered order). TRUE 'd' sort levels y decreasing order, anything else sort increasing order. error string; sets type error bars show bar line plots, turns . FALSE, error bars shown. Otherwise, default \"standard error\" ('^s'), \"confidence intervals\" (anything else) option. error.color color error bars. Default '#585858'. error.lwd line weight error bars. Default 2. lim numeric; checked number factor levels variable. Used decide variables split, colors use, turn legend. Default 9. set 20, lim treated infinite (set Inf). lines logical string specifying type lines drawn scatter plots. default (whenever cov missing, lines matches '^li|^lm|^st'), prediction line fitted lm. (potentially) bendy lines, 'loess' (matching '^loe|^po|^cu') use loess, 'spline' ('^sm|^sp|^') use smooth.spline. y numeric 2 levels, 'probability' ('^pr|^log') draw probabilities estimated logistic regression (glm(y ~ x, binomial)). 'connected' ('^e|^co|^d') draw lines connecting points, FALSE draw lines. ... passes additional arguments par legend. Arguments can named partially; must fully named. colors sets color theme manually specifies colors. Default theme \"pastel\", \"dark\" \"bright\" options; passed splot.color. set \"grey\", 9 levels, grey scale calculated using gray. See col parameter par acceptable manual inputs. set text axis colors, col sets outside texts (title, sud, labx, laby, note), col.sub col.main sets frame titles, col.axis sets axis text line colors. set color error bars, use error.color. histograms, vector two colors apply density line bars separately (e.g., color = c('red','green'), density line red histogram bars green). See color.lock color.offset arguments color controls. colorby variable list arguments used set colors legend, alternatively . missing, colorby reduced unique combinations colorby. example, participant ID multiple observations per participant, condition ID observations given participant, colorby assign single color participant based condition. list treated call splot.color, arguments can entered positionally name. Data entered directly splot can accessed position name preceded period. example, splot(rnorm(100), colorby=.y) draw histogram, bars colored value y (rnorm(100) case). colorby.leg logical; FALSE, legend colorby never drawn. Otherwise, legend colorby drawn specified , non-scatter plots (overwriting usual legend). color.lock logical; FALSE, colors adjusted offset lines points histogram bars. color.offset much points histogram bars offset initial color used lines. Default 1.1; values greater 1 lighten, less 1 darken. color.summary specifies function used collapse multiple colors single display. Either string matching one 'mean' (uses splot.colormean average RGB values), 'median' ( treats codes ordered, selects rounded median), 'mode' (selects common code), function takes color codes first argument, outputs single color code character. opacity number 0 1; sets opacity points, lines, bars. Semi-opaque lines sometimes displayed plot window, show plot written file. dark logical; TRUE, sets text axis colors \"white\". Defaults splot.dark option. x secondary variable, shown x axis. specified, type set 'density'. x factor vector characters, fewer lim levels treated factor, type set 'line' unless specified. 'splitting' variable within plot, plotted values x y grouped. single object name, two vector (e.g., c(b1, b2)), levels determine number plot windows shown (cells matrix plots; levels first variable rows, levels second columns). cov additional variables used adjustment. Bar line plots include cov variables regression models (via lm, e.g., lm(y ~ 0 + x + cov1 + cov2)) covariates. Scatter plots lines include cov variables regression model adjust prediction line (e.g., lm(y ~ x + x^2)). par options col, mfrow, oma, mar, mgp, font.main, cex.main, font.lab, tcl, pch, lwd, xpd set within function, overwritten included call. example, col sets font colors case (opposed colors sets line point colors). default '#303030' nice dark grey, maybe want lighten : col='#606060'. arguments applied par, used match legend argument, applied legend. line.type character setting style line (e.g., points joints) drawn line plots. Default 'b' error FALSE, 'l' otherwise. See line argument plot.default options. line.type='c' can look nice lot overlapping error bars. mv.scale determines whether center scale multiple y variables. center scale default. Anything 'none' mean center numeric y variable. Anything matching '^t|z|sc' also scale. mv..x logical; TRUE, variable names displayed x axis, x treated . save logical; TRUE, image plot saved current working directory. format type file save plots . Default cairo_pdf; see Devices options. dims vector 2 values (c(width, height)) specifying dimensions plot save inches pixels depending format. Defaults dimensions plot window. file.name string name file save (excluding extension, added depending format). myl sets range y axis (ylim plot barplot). specified, calculated data. mxl sets range x axis (xlim plot). specified, calculated data. autori logical; FALSE, origin plotted bars set 0. Otherwise, bars adjusted extend bottom y axis. xlas, ylas numeric; sets orientation x- y-axis labels. See par. xaxis, yaxis logical; FALSE, axis drawn. breaks determines width histogram bars. See hist. density.fill logical; FALSE turn polygon fills displayed, TRUE replace histograms polygons. density.opacity opacity density polygons, 0 1. density.args list arguments passed density. leg sets legend inside outside plot frames (character matching '^', character matching '^o' number respectively), turns (FALSE). inside, legend drawn plot frame. outside, single legend drawn either right plot frames, within empty plot frame. default, determined automatically, tending set legends outside multiple levels . number try set legend empty frame within grid plot frames. empty frames, legend just go side leg='outside'. lpos sets position legend within frame (whether inside outside plot frames) based keywords (see legend. default, legend outside, lpos either 'right' legend right-hand column, 'center' empty plot frame. legend inside lpos specified, legend placed automatically based data. Set 'place' manually place legend; clicking plot frame set top left corner legend. lvn level variable name. Logical: FALSE, names variables shown level (e.g., sex variable \"female\" level, \"sex: female\" become \"female\" plot window). leg.title sets title legend (variable name default), turns FALSE. leg.args list passing arguments legend call. title logical character: FALSE, main title turned . character, shown main title. labx, laby logical character: FALSE, label x axis turned . character, shown axis label. lty logical vector: FALSE, lines always solid. vector, changes line type based value. Otherwise loops available line types, see par. lwd numeric; sets weight lines line, density, scatter plots. Default 2. See par. sub affects small title plot showing levels; text replaces , FALSE turns . ndisp logical; FALSE, n per level longer displayed subheadings. note logical; FALSE, note bottom splits /lines error bars turned . font named numeric vector: c(title,sud,leg,leg.title,note). Sets font title, su display, legend levels title, note. addition, font.lab sets x y label font, font.sub sets font little title panel, font.axis sets axis label font, font.main sets level/n heading font; passed par. See input section. cex named numeric vector: c(title,sud,leg,note,points). Sets font size title, su display, legend, note, points. addition, cex.lab sets x y label size, cex.sub sets size little title panel, cex.axis sets axis label size, cex.main sets level/n heading size; passed par. See input section. sud affects heading subset covariates/line adjustments (su display); text replaces , FALSE turns . labels logical; FALSE, sets settable text surrounding plot FALSE (just set want clean frame). labels.filter regular expression string replaced label texts blank space. Default '_', underscores appearing text labels replace blank spaces. Set FALSE prevent filtering. labels.trim numeric logical; maximum length label texts (number characters). Default 20, longer labels trimmed. Set FALSE prevent trimming. points logical; FALSE, points scatter plot longer drawn. points.first logical; FALSE, points plotted lines drawn scatter plot, placing lines behind points. apply points lines added add, always evaluated main points lines drawn. byx logical; TRUE (default) specified, regressions bar line plots compare levels level x. makes intuitive error bars comparing levels within level x; otherwise, model comparing difference first level x levels. drop named logical vector: c(x,,bet). Specifies levels data treated. TRUE default, meaning levels data presented, layout levels minimized. x applies bar line plots. relates levels presented legend. bet FALSE, layout variables strict, levels [1] rows, levels [2] columns -- data intersection levels, corresponding panel blank. See input section. prat panel ratio, referring ratio plot frames legend frame legend . single number make panels equal width. vector two numbers adjust ratio plot panels legend panel. example, prat=c(3,1) makes plot panels relative width 3, legend frame relative width 1. check.height logical; FALSE, height plot frame checked plotting attempted. check tries avoid later errors, may prevent plotting plot possible. model logical; TRUE, summary interaction model printed. model always align plotted since variables may treated differently, particularly case interactions. options list named arguments, useful setting temporary defaults plan using options multiple plots (e.g., opt = list(type = 'bar', colors = 'grey', bg = '#999999'); splot(x ~ y, options = opt)). use quote include options evaluated within function (e.g., opt = list(su = quote(y > 0))). add evaluated within function, can refer objects returned, variable names (entered data frame entered arguments), entered data position, preceded '.' (e.g., mod = lm(.y~.x)). Useful adding things like lines plot parameters still set function (e.g., add = abline(v = mean(x), xpd = FALSE) vertical line mean x).","code":""},{"path":"https://miserman.github.io/splot/reference/splot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Plot — splot","text":"list containing data settings invisibly returned, might useful check errors. objects can also pulled within add:","code":""},{"path":"https://miserman.github.io/splot/reference/splot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Split Plot — splot","text":"x-axis levels text text x-axis levels (corresponding levels x) long, hidden overlapping. try avoid , default longer texts trimmed (dictated labels.trim), point orientation level text changed (settable xlas), may still see level text missing. make visible, can reduce labels.trim default 20 (rename levels variable), make level text vertical (xlas = 3), expand plot window possible. missing levels, lines, /error bars default (drop = TRUE), levels x data dropped, may see every level variable, level . Sometimes error bars estimated (, say, one observation given level), lines still drawn cases, may sometimes see levels without error bars even error bars turned . Sometimes (particularly drop['x'] FALSE), might see floating error bars lines drawn , appear completely empty levels. happens missing level x two non-missing levels, potentially making orphaned level (non-missing level surrounded missing levels). error bars orphaned level, default nothing drawn indicate . set line.type 'b' (type points), point drawn error-bar-less, orphaned levels. unexpected failures splot tries clean case error, may still run errors break things can happen. failed plot find unable make new plots, new plots drawn old ones, might try entering dev.() console. new plots look (splot's par settings get reset), may close plot window reset par (using RStudio, Plots > \"Remove Plot...\" \"Clear ...\"), restart R.","code":""},{"path":"https://miserman.github.io/splot/reference/splot.html","id":"input","dir":"Reference","previous_headings":"","what":"Input","title":"Split Plot — splot","text":"formulas y formula (~), variables pulled : y ~ x * * [1] * [2] + cov[1] + cov[2] + cov[n] y multiple variables, used identify variable (becomes factor variable names levels), anything entered treated [1], [1] moved [2], [2] discarded message. named vectors Named vector arguments like font, cex, drop can set single value, positionally, names. single value entered (e.g., drop = FALSE), applied level (.e., c(x = FALSE, = FALSE, bet = FALSE)). one value entered, treated positionally (e.g., cex = c(2, 1.2) read c(title = 2, sud = 1.2, leg = .9, note = .7, points = 1)). values named, named values set, defaults retained (e.g., cex = c(note = 1.2) read c(title = 1.5, sud = .9, leg = .9, note = 1.2, points = 1)).","code":""},{"path":"https://miserman.github.io/splot/reference/splot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Plot — splot","text":"","code":"# simulating data n <- 2000 dat <- data.frame(sapply(c(\"by\", \"bet1\", \"bet2\"), function(c) sample(0:1, n, TRUE))) dat$x <- with(   dat,   rnorm(n) + by * -.4 + by * bet1 * -.3 + by * bet2 *     .3 + bet1 * bet2 * .9 - .8 + rnorm(n, 0, by) ) dat$y <- with(   dat,   x * .2 + by * .3 + bet2 * -.6 + bet1 * bet2 * .8 + x *     by * bet1 * -.5 + x * by * bet1 * bet2 * -.5     + rnorm(n, 5) + rnorm(n, -1, .1 * x^2) )  # looking at the distribution of y between bets split by by splot(y, by = by, between = c(bet1, bet2), data = dat)   # looking at quantile splits of y in y by x splot(y ~ x * y, dat, split = \"quantile\")   # looking at y by x between bets splot(y ~ x, dat, between = c(bet1, bet2))   # sequentially adding levels of split splot(y ~ x * by, dat)  splot(y ~ x * by * bet1, dat)  splot(y ~ x * by * bet1 * bet2, dat)   # same as the last but entered by name splot(y, x = x, by = by, between = c(bet1, bet2), data = dat)  # zooming in on one of the windows splot(y ~ x * by, dat, bet1 == 1 & bet2 == 0)   # comparing an adjusted lm prediction line with a loess line # this could also be entered as y ~ poly(x,3) splot(y ~ x + x^2 + x^3, dat, bet1 == 1 & bet2 == 0 & by == 1, add = {   lines(x[order(x)], loess(y ~ x)$fitted[order(x)], lty = 2)   legend(\"topright\", c(\"lm\", \"loess\"), lty = c(1, 2), lwd = c(2, 1), bty = \"n\") })   # looking at different versions of x added to y splot(cbind(   Raw = y + x,   Sine = y + sin(x),   Cosine = y + cos(x),   Tangent = y + tan(x) ) ~ x, dat, myl = c(-10, 15), lines = \"loess\", laby = \"y + versions of x\")"},{"path":[]},{"path":"https://miserman.github.io/splot/news/index.html","id":"additions-0-5-3","dir":"Changelog","previous_headings":"","what":"Additions","title":"splot 0.5.3","text":"adds splot.colorcontrast.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"improvements-0-5-3","dir":"Changelog","previous_headings":"","what":"Improvements","title":"splot 0.5.3","text":"improves reference resolution colors add. allows control graphical parameters.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"bug-fixes-0-5-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"splot 0.5.3","text":"accounts NULL stringsAsFactors option. appropriately drops levels based factor.","code":""},{"path":[]},{"path":"https://miserman.github.io/splot/news/index.html","id":"additions-0-5-2","dir":"Changelog","previous_headings":"","what":"Additions","title":"splot 0.5.2","text":"dark option easily set text colors dark backgrounds.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"improvements-0-5-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"splot 0.5.2","text":"standardizes color codes passing par. avoids overwriting par color settings. better handles arguments outside options options specified. treats logical y variables binary rather factors.","code":""},{"path":[]},{"path":"https://miserman.github.io/splot/news/index.html","id":"additions-0-5-1","dir":"Changelog","previous_headings":"","what":"Additions","title":"splot 0.5.1","text":"check equivalency expression outputs within splot.bench.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"improvements-0-5-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"splot 0.5.1","text":"handles input .matrix .data.frame methods. adds cutoff option relative timings splot.bench better display, includes return. splot.bench now evaluates within global environment loaded packages can used.","code":""},{"path":[]},{"path":"https://miserman.github.io/splot/news/index.html","id":"additions-0-5-0","dir":"Changelog","previous_headings":"","what":"Additions","title":"splot 0.5.0","text":"specify colors interpolated color.summary. calculate average colors splot.colormean function. fill area density lines color density.fill = TRUE (default), adjust fill’s opacity density.opacity, control densities arguments density.args (replaces old bw adj arguments).","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"splot 0.5.0","text":"broadens colorby applicability flexibility. tweaks default spacing rules maximize plot areas. aligns axis label specification density types. better retains infers names multiple variables. avoids error colorby’s missing values.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"splot 0.5.0","text":"corrects several colorby assignment issues. handles mixed-type multiple ys converting non-numeric variables numeric numeric variables included. maintains variable ordering displaying counts categorical ys. includes colorby variable name split note split.","code":""},{"path":[]},{"path":"https://miserman.github.io/splot/news/index.html","id":"additions-0-4-2","dir":"Changelog","previous_headings":"","what":"Additions","title":"splot 0.4.2","text":"assign colors scale numeric values splot.color’s grade argument.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"improvements-0-4-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"splot 0.4.2","text":"makes legend colorby cases. allows renaming reordering character factor y levels. broadly retains character factor level orders. broadly accounts missing values. better handles colorby x aggregation. splot.color returns shorter color codes opacity 1.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"bug-fixes-0-4-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"splot 0.4.2","text":"corrects application adjustments splot.color sampling method used. corrects connected line paths sparse. calculates frequencies y levels within splits. corrects colorby x assignments. preserves color assignments colorby multiple arguments, levels empty. avoids error level split empty.","code":""},{"path":[]},{"path":"https://miserman.github.io/splot/news/index.html","id":"improvements-0-4-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"splot 0.4.1","text":"allows splot.color sampling turned . allows splot.bench handle single runs. enables sorting options.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"splot 0.4.1","text":"correctly display error bars error set FALSE. corrects x-axis range scatter plots x logical. corrects bet reassignment given multiple ys.","code":""},{"path":[]},{"path":"https://miserman.github.io/splot/news/index.html","id":"additions-0-4-0","dir":"Changelog","previous_headings":"","what":"Additions","title":"splot 0.4.0","text":"place legend interactively. adjust color opacity, assign colors gradients. split specified values. display predicted probability lines scatter plots 2-level ys. allows non-numeric y variables.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"splot 0.4.0","text":"general improvements automatic settings. reliable connection data line colors, types, widths. provides control legend colorby. improved reading y su arguments. improved bar plot y-axis labels.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"splot 0.4.0","text":"now appropriately recycles short variables. avoids error levels missing within splits.","code":""},{"path":[]},{"path":"https://miserman.github.io/splot/news/index.html","id":"additions-0-3-2","dir":"Changelog","previous_headings":"","what":"Additions","title":"splot 0.3.2","text":"sort text x variables y values. split specified number segments.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"improvements-0-3-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"splot 0.3.2","text":"cleared sub/sud related mixups. level ordering now applies variables. improved formula parsing; expressions better recognized arguments. rearranged arguments like functions; variables y must named, entered part y formula. multiple variables entered y can now renamed/ordered mv entry levels.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"splot 0.3.2","text":"corrected y-axis labeling bar plots autori true. custom notes now overwrite note elements. specified x levels now appropriately applied mv..x true. standardized lty behavior across types, prevented causing errors. fixed issue longer vectors entered directly arguments. multiple y variables name now treated different.","code":""},{"path":[]},{"path":"https://miserman.github.io/splot/news/index.html","id":"additions-0-3-1","dir":"Changelog","previous_headings":"","what":"Additions","title":"splot 0.3.1","text":"added colorby argument, offering different way assign colors. added utility functions: splot.color assign colors group, splot.bench plot run-time expressions. allows text x-axis labels scatter plots.","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"improvements-0-3-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"splot 0.3.1","text":"changed way variables evaluated accommodated calls splot within functions. improved handling variables uneven levels. improved variable/level length handling. improved handling prediction line errors fatal errors. bar line plots longer skip levels x one level .","code":""},{"path":"https://miserman.github.io/splot/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"splot 0.3.1","text":"corrected occasional mismatch x labels data.","code":""}]
